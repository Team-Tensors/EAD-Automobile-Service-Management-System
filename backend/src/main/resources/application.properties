spring.application.name=backend

# ------------------------------------
# Server Configuration
# ------------------------------------
server.port=4000
server.servlet.context-path=/api

# ------------------------------------
# PostgreSQL Database Configuration (DigitalOcean)
# ------------------------------------
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# ------------------------------------
# JPA / Hibernate Configuration
# ------------------------------------
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
# Using 'validate' with Flyway for production-ready migrations
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Optional: Prevent connection issues with SSL
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.connection-timeout=30000

# ------------------------------------
# Flyway Migration Configuration
# ------------------------------------
spring.flyway.enabled=true
spring.flyway.baseline-on-migrate=true
spring.flyway.locations=classpath:db/migration
spring.flyway.schemas=public

# ------------------------------------
# JWT Configuration
# ------------------------------------
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}

# Refresh Token Configuration
jwt.refresh.expiration=${JWT_REFRESH_EXPIRATION:604800000}
jwt.refresh.max-tokens-per-user=${JWT_REFRESH_MAX_TOKENS:5}

# ------------------------------------
# OAuth2 Configuration (Google)
# ------------------------------------
# Get these from Google Cloud Console: https://console.cloud.google.com/
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# OAuth2 Provider Configuration
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# Frontend URL for OAuth redirect
app.frontend.url=${FRONTEND_URL:http://localhost:5173}

# ------------------------------------
# Logging Configuration
# ------------------------------------
logging.level.com.ead.backend=INFO
logging.level.com.ead.backend.controller.AuthController=INFO
logging.level.com.ead.backend.config.RequestLoggingInterceptor=INFO
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.springframework.web=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# ------------------------------------
# Application Specific Configuration
# ------------------------------------
app.name=Automobile Service Management System
app.version=1.0.0
app.description=A comprehensive system for managing automobile service appointments and projects
